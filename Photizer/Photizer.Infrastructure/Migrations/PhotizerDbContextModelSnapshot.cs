// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Photizer.Infrastructure.Data;
using System;

namespace Photizer.Infrastructure.Migrations
{
    [DbContext(typeof(PhotizerDbContext))]
    partial class PhotizerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6");

            modelBuilder.Entity("Photizer.Domain.Entities.Camera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("Photizer.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Photizer.Domain.Entities.Collection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("Photizer.Domain.Entities.CollectionPicture", b =>
                {
                    b.Property<int>("PictureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CollectionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PictureId", "CollectionId");

                    b.HasIndex("CollectionId");

                    b.ToTable("CollectionPicture");
                });

            modelBuilder.Entity("Photizer.Domain.Entities.Lense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lenses");
                });

            modelBuilder.Entity("Photizer.Domain.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Place")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Photizer.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("Photizer.Domain.Entities.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aperture")
                        .HasColumnType("TEXT");

                    b.Property<int?>("CameraId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileType")
                        .HasColumnType("TEXT");

                    b.Property<string>("FocalLength")
                        .HasColumnType("TEXT");

                    b.Property<string>("ISOSpeed")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LenseId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShutterSpeed")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CameraId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LenseId");

                    b.HasIndex("LocationId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("Photizer.Domain.Entities.PicturePerson", b =>
                {
                    b.Property<int>("PictureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PersonId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PictureId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PicturePerson");
                });

            modelBuilder.Entity("Photizer.Domain.Entities.PictureTag", b =>
                {
                    b.Property<int>("PictureId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PictureId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PictureTag");
                });

            modelBuilder.Entity("Photizer.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Photizer.Domain.Entities.CollectionPicture", b =>
                {
                    b.HasOne("Photizer.Domain.Entities.Collection", "Collection")
                        .WithMany("CollectionPictures")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photizer.Domain.Entities.Picture", "Picture")
                        .WithMany("CollectionPictures")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Photizer.Domain.Entities.Picture", b =>
                {
                    b.HasOne("Photizer.Domain.Entities.Camera", "Camera")
                        .WithMany("Pictures")
                        .HasForeignKey("CameraId");

                    b.HasOne("Photizer.Domain.Entities.Category", "Category")
                        .WithMany("Pictures")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Photizer.Domain.Entities.Lense", "Lense")
                        .WithMany("Pictures")
                        .HasForeignKey("LenseId");

                    b.HasOne("Photizer.Domain.Entities.Location", "Location")
                        .WithMany("Pictures")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("Photizer.Domain.Entities.PicturePerson", b =>
                {
                    b.HasOne("Photizer.Domain.Entities.Person", "Person")
                        .WithMany("PicturePeople")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photizer.Domain.Entities.Picture", "Picture")
                        .WithMany("PicturePeople")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Photizer.Domain.Entities.PictureTag", b =>
                {
                    b.HasOne("Photizer.Domain.Entities.Picture", "Picture")
                        .WithMany("PictureTags")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Photizer.Domain.Entities.Tag", "Tag")
                        .WithMany("PictureTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
